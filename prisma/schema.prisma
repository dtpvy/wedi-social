// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fieldReference"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserStatus {
    NOTVERIFIED
    ACTIVE
    BANNED
}

enum LocationStatus {
    ACTIVE
    DEACTIVE
}

enum TripStatus {
    SCHEDULE
    DONE
}

enum JoinTripStatus {
    PENDING
    JOINED
    REJECTED
    LEAVED
}

enum Privacy {
    PRIVATE
    PUBLIC
    FRIEND
}

enum FriendStatus {
    PENDING
    ACCEPT
    REJECT
}

model Language {
    id   Int    @id @default(autoincrement())
    name String @db.VarChar(255)
    code String @unique @db.VarChar(2)
    user User[]
}

model Country {
    id       Int        @id @default(autoincrement())
    name     String     @db.VarChar(255)
    code     String     @unique @db.VarChar(255)
    city     City[]
    user     User[]
    location Location[]
}

model City {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar(255)
    code      String     @unique @db.VarChar(255)
    country   Country    @relation(fields: [countryId], references: [id])
    countryId Int
    district  District[]
    user      User[]
    location  Location[]
}

model District {
    id       Int        @id @default(autoincrement())
    name     String     @db.VarChar(255)
    code     String     @unique @db.VarChar(255)
    city     City       @relation(fields: [cityId], references: [id])
    cityId   Int
    ward     Ward[]
    user     User[]
    location Location[]
}

model Ward {
    id         Int        @id @default(autoincrement())
    name       String     @db.VarChar(255)
    code       String     @unique @db.VarChar(255)
    district   District   @relation(fields: [districtId], references: [id])
    districtId Int
    user       User[]
    location   Location[]
}

model User {
    id         Int        @id @default(autoincrement())
    name       String     @db.VarChar(255)
    imgUrl     String?    @db.VarChar(255)
    bgUrl      String?    @db.VarChar(255)
    password   String
    email      String     @unique @db.VarChar(255)
    phone      String     @unique @db.VarChar(255)
    bio        String?    @db.VarChar(255)
    status     UserStatus @default(NOTVERIFIED)
    languageId Int?
    cityId     Int?
    districtId Int?
    wardId     Int?
    countryId  Int?
    street     String?    @db.VarChar(255)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    country  Country?  @relation(fields: [countryId], references: [id])
    city     City?     @relation(fields: [cityId], references: [id])
    district District? @relation(fields: [districtId], references: [id])
    ward     Ward?     @relation(fields: [wardId], references: [id])
    language Language? @relation(fields: [languageId], references: [id])
    posts    Post[]
    reviews  Review[]

    reactions PostReaction[]
    comments  Comment[]

    sendMessages     Message[]      @relation("send_messages")
    receiveMessages  Message[]      @relation("receive__messages")
    schedules        JoinSchedule[]
    joinTrip         JoinTrip[]     @relation("trip_join_user")
    inviteTrip       JoinTrip[]     @relation("trip_join_inviter")
    requests         Request[]
    notification     Notification[] @relation("user")
    sendNotification Notification[] @relation("actor")
    friends          Friend[]       @relation("user")
    userFriends      Friend[]       @relation("friend")
}

model Review {
    id         Int @id @default(autoincrement())
    userId     Int
    locationId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user     User     @relation(fields: [userId], references: [id])
    location Location @relation(fields: [locationId], references: [id])
}

model Location {
    id         Int            @id @default(autoincrement())
    name       String         @db.VarChar(255)
    status     LocationStatus @default(ACTIVE)
    cityId     Int
    districtId Int
    wardId     Int
    countryId  Int
    street     String         @db.VarChar(255)

    deleted   DateTime?
    createdAt DateTime  @default(now())

    country   Country        @relation(fields: [countryId], references: [id])
    city      City           @relation(fields: [cityId], references: [id])
    district  District       @relation(fields: [districtId], references: [id])
    ward      Ward           @relation(fields: [wardId], references: [id])
    reviews   Review[]
    schedules Schedule[]
    posts     PostLocation[]
}

model Reaction {
    id     Int    @id @default(autoincrement())
    name   String @db.VarChar(255)
    imgUrl String @db.VarChar(255)

    posts PostReaction[]
}

model Comment {
    id      Int    @id @default(autoincrement())
    content String
    imgUrl  String @db.VarChar(255)
    userId  Int
    postId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])
}

model Post {
    id        Int      @id @default(autoincrement())
    content   String?
    imgUrls   String[] @db.VarChar(255)
    creatorId Int
    tripId    Int?
    isDeleted Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime @updatedAt

    trips   Trip? @relation(fields: [tripId], references: [id])
    creator User  @relation(fields: [creatorId], references: [id])

    reactions PostReaction[]
    comments  Comment[]
    locations PostLocation[]
}

model PostReaction {
    post       Post     @relation(fields: [postId], references: [id])
    postId     Int
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    reaction   Reaction @relation(fields: [reactionId], references: [id])
    reactionId Int

    @@id([postId, userId, reactionId])
}

model PostLocation {
    postId     Int
    locationId Int
    post       Post     @relation(fields: [postId], references: [id])
    location   Location @relation(fields: [locationId], references: [id])

    @@id([postId, locationId])
}

model Trip {
    id           Int            @id @default(autoincrement())
    name         String         @db.VarChar(255)
    status       TripStatus     @default(SCHEDULE)
    startDate    DateTime
    privacy      Privacy
    posts        Post[]
    joinSchedule JoinSchedule[]
    users        JoinTrip[]
}

model JoinTrip {
    userId    Int
    tripId    Int
    status    JoinTripStatus
    inviterId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User  @relation("trip_join_user", fields: [userId], references: [id])
    inviter User? @relation("trip_join_inviter", fields: [inviterId], references: [id])
    trip    Trip  @relation(fields: [tripId], references: [id])

    @@id([userId, tripId])
}

model Schedule {
    id          Int      @id @default(autoincrement())
    name        String   @db.VarChar(255)
    description String?
    imgUrls     String[] @db.VarChar(255)
    locationId  Int
    startTime   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())

    location     Location       @relation(fields: [locationId], references: [id])
    joinSchedule JoinSchedule[]
}

model JoinSchedule {
    userId     Int
    tripId     Int
    scheduleId Int
    remindTime DateTime
    isCreator  Boolean
    user       User     @relation(fields: [userId], references: [id])
    trip       Trip     @relation(fields: [tripId], references: [id])
    schedule   Schedule @relation(fields: [scheduleId], references: [id])

    @@id([userId, tripId, scheduleId])
}

model Message {
    id         Int      @id @default(autoincrement())
    content    String
    mediaUrls  String[]
    senderId   Int
    receiverId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sender   User @relation("send_messages", fields: [senderId], references: [id])
    receiver User @relation("receive__messages", fields: [receiverId], references: [id])
}

model Notification {
    id        Int      @id @default(autoincrement())
    content   String
    link      String?  @db.VarChar(255)
    actorId   Int
    userId    Int
    createdAt DateTime @default(now())
    user      User     @relation("user", fields: [userId], references: [id])
    actor     User     @relation("actor", fields: [actorId], references: [id])
    seen      Boolean  @default(false)
}

model Admin {
    id        Int     @id @default(autoincrement())
    email     String  @unique @db.VarChar(255)
    name      String? @db.VarChar(255)
    imgUrl    String? @db.VarChar(255)
    isDeleted Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    Reply     Reply[]
}

model Request {
    id        Int      @id @default(autoincrement())
    content   String
    title     String   @db.VarChar(255)
    createdAt DateTime @default(now())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    reply     Reply[]
}

model Reply {
    id        Int      @id @default(autoincrement())
    content   String
    title     String   @db.VarChar(255)
    createdAt DateTime @default(now())
    adminId   Int
    requestId Int
    admin     Admin    @relation(fields: [adminId], references: [id])
    request   Request  @relation(fields: [requestId], references: [id])
}

model Tracking {
    id     Int    @id @default(autoincrement())
    event  String
    page   String @db.VarChar(255)
    amount Int
}

model Friend {
    userId   Int
    friendId Int
    status   FriendStatus
    user     User         @relation("user", fields: [userId], references: [id])
    friend   User         @relation("friend", fields: [friendId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, friendId])
}
